import {
  DataSource,
  ViewColumn,
  ViewEntity,
} from 'typeorm';

import {
  Field,
  Int,
  ObjectType,
} from '@nestjs/graphql';

import { <%- classname %> } from './<%- name %>.entity';


<% for(const o of options.Relations) { %> 

import { <%- o.target  %>  } from '../../<%- o.name %>'

<% } %>




@ObjectType()
@ViewEntity({
  expression: (ds: DataSource) => {
    return ds
      .createQueryBuilder()
      .select('<%- name %>.id', 'id')
      .addSelect('<%- name %>.uuid', 'uuid')


        <% for(const o of options.Properties) { %> 
            .addSelect('<%- name %>.<%- o.Property %>', '<%- o.Property %>')
        <% } %>

        <% for(const o of options.Relations) { %> 
          
            <% for(const v of o.viewColumns) { %> 
                  .addSelect('<%- o.name %>.<%- v.column %>', '<%- v.as %>')
            <% } %>
        <% } %>


      .from(<%- classname %>, '<%- name %>')

      <% for(const o of options.Relations) { %> 
        .leftJoin(<%- o.target %>, '<%- o.name %>')
      <% } %> 
  },
})
export class <%- classname %>View {
  @Field()
  @ViewColumn()
  id: number;

  @Field()
  @ViewColumn()
  uuid: string;


<% for(const o of options.Properties) { %> 
  
  @Field()
  @ViewColumn()
  <%- o.Property %>: <%- o.Column.valueType %>;


<% } %>

<% for(const o of options.Relations) { %> 

    <% for(const v of o.viewColumns) { %> 

        @Field()
        @ViewColumn()
        <%- v.as %>: <%- v.valueType %>

    <% } %>
<% } %>



}
