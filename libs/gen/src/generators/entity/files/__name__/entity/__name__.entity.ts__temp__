import { BaseEntity } from 'core/entity';
import {
  Column,
  Entity,
  JoinColumn,
  JoinTable,
  ManyToOne,
  OneToOne, 
  OneToMany, 
  ManyToMany
} from 'typeorm';


import { I<%- classname %> } from 'common/<%- project %>/interfaces/<%- name %>';


<% for(const o of options.Relations || []) { %> 

import { <%- o.target  %>  } from '../../<%- o.name %>'

<% } %>

import {
  Field,
  ObjectType,
} from '@nestjs/graphql';

@Entity()
@ObjectType()
export class <%- classname %> extends BaseEntity



<% if(options.Relations?.length > 0) { %> 
    implements I<%- classname %><   <% for(const o of options.Relations || []) { %>  
    
    <% if(o.type.endsWith('One')) { %>   
       <%- o.target %>,
    <% } else { %> 
      <%- o.target %>[],
    <% } %>

      <% } %> >
<% } else { %> 
  implements I<%- classname %>
<% } %>


 {

<% for(const o of options.Properties) { %> 
  
  @Field()
  @Column({type: '<%- o.Column.columnType %>', nullable: <%- !options.Required?.includes(o.Property) %>, unique:  <%- !!options.Unique?.includes(o.Property) %>  })
  <%- o.Property %>: <%- o.Column.valueType %>;


<% } %>

<% for(const o of options.Relations || []) { %> 

  @<%- o.type %>(()=> <%- o.target %>, { eager: <%- o.eager===true %>, nullable: <%- o.nullable===true %>})
  <% if(o.joinColumn) { %>  @JoinColumn()  <% } %> 
  <% if(o.joinTable) { %>  @JoinTable()  <% } %> 
  <%- o.name %>?: <%- o.target %> 

<% } %>

}
