import { Expose } from 'class-transformer';
import {
  Field,
  InputType,
  Int
} from '@nestjs/graphql';
import { Validations} from 'core/validations'
import { ID} from 'core/dto'

import { ValidateNested } from 'class-validator';

import { I<%- classname %> } from 'common/<%- project %>/interfaces/<%- name %>';

<% for(const target of new Set(options.Relations?.map(e=>e.target) || [])) { %> 

import { <%- target  %>  } from '../../<%- target.toLowerCase() %>';

<% } %>

@InputType()
export class Update<%- classname %>Dto

<% if(options.Relations?.length > 0) { %> 
    implements Partial<I<%- classname %><   <% for(const o of options.Relations || []) { %>  
    
    <% if(o.type.endsWith('One')) { %>   
       <%- o.target %>,
    <% } else { %> 
      <%- o.target %>[],
    <% } %>

      <% } %> >>
<% } else { %> 
  implements  Partial<I<%- classname %>>
<% } %>


 {
  <% for(const o of options.Properties) { %> 
  
  @Field()
  @Validations({
    <% for(const [key, value] of Object.entries(o.Validation)) { %>
      <% if(typeof value ==='string'){ %> 
        <%- key %>: '<%- value %>',
      <% } else { %>
        <% if(key ==='required') { %> 
           <%- key %>: false,
           <% continue %>
        <% } %>
        <%- key %>: <%- value %>,
      <% } %>
    <%  } %>
  })
  @Expose()
  <%- o.Property %>: <%- o.Column.valueType %>;
  
  <% } %>

    <% for(const o of options.Relations || []) { %> 
  
    <% if(o.type.endsWith('One')) { %>   
        @Field(()=>Int)
        @Validations({    min:1  })
        @Expose()
        <%- o.name %>: <%- o.target %>;
    <% } else { %> 

        @Field(()=>ID)
        @ValidateNested()
        @Expose()
        <%- o.name %>: <%- o.target %>[];

    <% } %>

  <% } %>
}
