import { Expose, Type } from 'class-transformer';
import {  Field,  InputType, Int} from '@nestjs/graphql';
import { Validations } from 'core/validations'
import { ID } from 'core/dto'
import { ValidateNested } from 'class-validator';

import { I<%- classname %> } from 'common/<%- project %>/interfaces/<%- name %>';

@InputType()
export class Create<%- classname %>Dto  


<% if(options.Relations?.length > 0) { %> 
    implements I<%- classname %><   <% for(const o of options.Relations || []) { %>  
    
    <% if(o.type.endsWith('One')) { %>   
       ID,
    <% } else { %> 
      ID[],
    <% } %>

      <% } %> >
<% } else { %> 
  implements I<%- classname %>
<% } %>

 {
  <% for(const o of options.Properties) { %> 
  
  @Field()
  @Validations({
    <% for(const [key, value] of Object.entries(o.Validation)) { %>
      <% if(typeof value ==='string'){ %> 
        <%- key %>: '<%- value %>',
      <% } else { %>
        <%- key %>: <%- value %>,
      <% } %>
    <%  } %>
  })
  @Expose()
  <%- o.Property %>: <%- o.Column.valueType %>;


  <% } %>



  <% for(const o of options.Relations || []) { %> 
  
    <% if(o.type.endsWith('One')) { %>   
        @Field(()=>Int)
        @ValidateNested()
        @Type(() => ID)
        @Expose()
        <%- o.name %>: ID;
    <% } else { %> 

        @Field(() => ID)
        @ValidateNested({ each: true })
        @Type(() => ID)
        @Expose()
        <%- o.name %>: ID[];

    <% } %>

  <% } %>
}
