import {
  Body,
  Controller,
  Delete,
  Get,
  Param,
  Post,
  Put,
  Query,
  Patch,
  BadRequestException
} from '@nestjs/common';
import { ApiTags } from '@nestjs/swagger';
import {
  FunctionsDto,
  PaginatorDto,
  QueryDto,
  ViewDto,
  WhereDto
} from 'core/dto';
 
import { 

  Create<%- classname %>Dto,
  Update<%- classname %>Dto
} from 'models/<%- project %>/<%- name %>';

import { <%- classname %>ViewService } from './<%- name %>-view.service';
import { <%- classname %>Service } from './<%- name %>.service';

@ApiTags('<%- name %>')
@Controller('<%- name %>')
export class <%- classname %>Controller {
  constructor(
    private readonly service: <%- classname %>Service,
    private readonly viewService: <%- classname %>ViewService
  ) {}

  @Get()
  read<%- classname %>(
    @Query() paginatorDto: PaginatorDto,
    @Query() viewDto: ViewDto,
    @Query() whereDto: WhereDto
  ) {
    const q = {
      ...paginatorDto,
      where: whereDto.where,
    };

    if (viewDto.view === true) {
      return this.viewService.find(q);
    }
    return this.service.find(q);
  }

  @Get(':id')
  read<%- classname %>ById(@Param('id') id: number, @Query() view: ViewDto) {
    if (view.view === true) {
      return this.viewService.findOneBy();
    }
    return this.service.findOneBy({ id });
  }

  @Post()
  write<%- classname %>(@Body() body: Create<%- classname %>Dto) {
    return this.service.save(body);
  }

  @Put(':id')
  update<%- classname %>(@Param('id') id: number, @Body() body: Update<%- classname %>Dto) {
    return this.service.update(id, body);
  }

  @Delete(':id')
  delete<%- classname %>(@Param('id') id: number) {
    return this.service.delete(id);
  }

  @Patch()
  functions(@Query() functions: FunctionsDto) {
    if (functions.query === 'count') {
      return this.service.count();
    }
    throw new BadRequestException('Must provide a fucntion name.');
  }


  <% for( const r of options.Relations || []) { %> 


      <% if(r.type.endsWith('One')) { %> 
            @Post(':id/<%- r.name %>/:<%- r.name %>Id')
            set<%- r.name %>To<%- classname %>(id: number, <%- r.name %>Id: number) {
              return this.service.set(id, <%- r.name %>Id, '<%- r.name %>');
            }

            @Post(':id/<%- r.name %>')
            unset<%- r.name %>From<%- classname %>(id: number) {
              return this.service.unset(id, '<%- r.name %>');
            }
      <% } else { %> 

            @Post(':id/<% r.name %>/:rid')
            add<%- r.name %>To<%- classname %>(id: number, rid: number) {
              return this.service.add(id, rid, '<% r.name %>');
            }

            @Post(':id/<% r.name %>/:rid')
            remove<%- r.name %>From<%- classname %>(id: number, rid: number) {
              return this.service.remove(id, rid, '<% r.name %>');
            }

      <% } %>

  <% } %>

}
