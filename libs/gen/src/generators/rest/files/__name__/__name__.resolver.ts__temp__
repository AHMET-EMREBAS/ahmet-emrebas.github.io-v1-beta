import {
  PaginatorDto,
  ViewDto,
} from 'core/dto';
import { PubSub } from 'graphql-subscriptions';
import { ILike } from 'typeorm';

import {
  Args,
  Mutation,
  Query,
  Resolver,
  Subscription,
} from '@nestjs/graphql';


import { 
  <%- classname %>, 
  <%- classname %>View, 
  Create<%- classname %>Dto,
  Update<%- classname %>Dto
} from 'models/<%- project %>/<%- name %>';

import { <%- classname %>ViewService } from './<%- name %>-view.service';
import { <%- classname %>Service } from './<%- name %>.service';

const pubSub = new PubSub();

@Resolver(() => <%- classname %>)
export class <%- classname %>Resolver {
  constructor(
    private readonly service: <%- classname %>Service,
    private readonly viewService: <%- classname %>ViewService
  ) {}

  @Query(() => [<%- classname %>])
  read(
    @Args('paginator', { nullable: true }) paginator: PaginatorDto,
    @Args('view', { nullable: true }) view: ViewDto
  ) {
    if (view.view === true) {
      return this.viewService.find({
        where: {
          name: ILike('some'),
        },
      });
    }
    return this.service.find({
      ...paginator,
    });
  }

  @Query(() => <%- classname %>)
  readById(@Args('id') id: number) {
    return this.service.findOneBy({ id });
  }

  @Mutation(() => <%- classname %>)
  write(@Args('<%- name %>') body: Create<%- classname %>Dto) {
    return this.service.save(body);
  }

  @Mutation(() => Boolean)
  update(@Args('id') id: number, @Args('<%- name %>') body: Update<%- classname %>Dto) {
    return this.service.update(id, body);
  }

  @Mutation(() => Boolean)
  delete(@Args('id') id: number) {
    return this.service.delete(id);
  }

  @Subscription(() => <%- classname %>)
  onSave() {
    return pubSub.asyncIterator('saved<%- classname %>');
  }
}
