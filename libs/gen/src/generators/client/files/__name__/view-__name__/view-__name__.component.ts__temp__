import {
  Component,
  ViewChild,
  AfterViewInit
} from '@angular/core';
import {
  ActivatedRoute,
  Router,
} from '@angular/router';

import {  
  IRead<%- classname %>, 
  <% for(const target of new Set(options.Relations?.map(e=>e.target) || [])) { %>   IRead<%- target %>, <% } %> 

} from 'common/<%- project %>/interfaces';


import {
  ColumnOption,
  FilterEvent,
  PageEvent,
  SortEvent,
  TableComponent,
} from 'material/table';

import { <%- classname %>Service } from '../<%- name %>.service';

<% for(const target of new Set(options.Relations?.map(e=>e.target) || [])) { %> 
    import { <%- target %>Service } from '../../<%- target.toLowerCase() %>'; 
<% } %>


@Component({
  selector: 'ae-view-<%- name %>',
  templateUrl: './view-<%- name %>.component.html',
  styleUrls: ['./view-<%- name %>.component.scss'],
})
export class View<%- classname %>Component implements AfterViewInit {
  @ViewChild('dataTable') dataTable!: TableComponent;
  rows = 10;
  first = 0;
  filters = [];
  sort = [];

  totalRecords$ = this.<%- name %>Service.allCount$;
  items$ = this.<%- name %>Service.entities$

  columns: ColumnOption<IRead<%- classname %>>[] = [

{ 
  header:"#", 
  field:"id",
},
{ 
  header:"UUID", 
  field:"uuid",
},

<% for(const f of options.Properties) { %> 
{
  header:'<%- f.label || f.Property %>', 
  field:'<%- f.Property %>' 
},
<% } %>

<% for(const col of options.Relations || []) { %> 

    { 
      header: '<%- col.label || col.name %>', 
      field: '<%- col.name %>', 
      mapper:(item?: IRead<%- col.target %>)=>item?.<%- col.viewColumns[0].column %>
    },
<% } %>



    { 
      header:"Create Time", 
      field:"createdAt",
    },
    { 
      header:"Update Time", 
      field:"updatedAt",
    },
    { 
      header:"Delete Time", 
      field:"deletedAt",
    },
  ];

  constructor(
    private readonly <%- name %>Service: <%- classname %>Service,
    private readonly router: Router,
    private readonly route: ActivatedRoute,
    <% for(const o of options.Relations || []) { %>  private readonly <%- o.name %>Service: <%- o.target %>Service, <% } %>
  ) {


  }

  ngAfterViewInit(): void {
   this.<%- name %>Service.query(this.dataTable.table);   
  }

  newItem() {
    this.goTo('create');
  }

  editItems() {
    this.goTo('update');
  }

  deleteItems(event: any) {
    this.goTo('delete');
  }

  goTo(
    path: 'create' | 'update' | 'delete',
    queryParams?: Record<string, any>
  ) {
    this.router.navigate([path], { relativeTo: this.route, queryParams });
  }

  selectItems(event: any) {
    this.<%- name %>Service.updateSelection([...event]);
  }

  handleEvent() {
      this.<%- name %>Service.query(this.dataTable.table); 
  }
}
