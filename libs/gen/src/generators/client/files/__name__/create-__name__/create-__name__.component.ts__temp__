import { Component } from '@angular/core';
import {
  FormControl,
  FormGroup,
  Validators,
} from '@angular/forms';
import {
  ActivatedRoute,
  Router,
} from '@angular/router';

import { InputOptions } from 'material/form';

import { <%- classname %>Service } from '../<%- name %>.service';

<% for(const o of options.Relations || []) { %> 

import { <%- o.target %>Service } from '../../<%- o.name %>';

<% } %>

@Component({
  selector: 'ae-create-<%- name %>',
  templateUrl: './create-<%- name %>.component.html',
  styleUrls: ['./create-<%- name %>.component.scss'],
})
export class Create<%- classname %>Component {
  submitted = false;
  title = 'Create <%- classname %>';
  formGroup = new FormGroup({
    <% for(const f of options.Properties) { %> 
     <%- f.Property %>: new FormControl('', [ 
      <% if(options.Required?.includes(f.Property)) { %> 
            Validators.required, 
       <% } %>
      <% for(const [vk, vv] of Object.entries(f.Validation || [])) { %> 
          <% if(vk ==='type') {  continue; %> <% } %>
          Validators.<%- vk %>(<%- vv %>),
      <% } %>
     ]), 
    <% } %>
    
    <% for(const r of options.Relations || []) { %> 
      <%- r.name %>: new FormControl('', [ 
      <% if(options.Required?.includes(r.name)) { %> 
            Validators.required, 
       <% } %>
      ]),
    <% } %>
  });

  fields: InputOptions[] = [

    <% for(const f of options.Properties) { %> 
    
    {
      name: '<%- f.Property %>', 
      type: '<%- f.UI.type %>',  

      <% if(options.Required?.includes(f.Property)) { %> 
            required:true,
       <% } %>

      <% for(const [vk, vv] of Object.entries(f.Validation || [])) { %> 
          <% if(vk ==='type') {  continue; %> <% } %>
          <%- vk %>: <% if(typeof vv ==='string') {  %> '<%- vv %>' <%} else { %>  <%- vv %> <%} %> ,
      <% } %>
    },

    <% } %>
    
    <% for(const r of options.Relations || []) { %> 

    {
      name: '<%- r.name %>', 
      type: 'select',      
      asyncOptions:  this.<%- r.name %>Service.entities$,
      optionValue:'id', 
      optionLabel: 'name',
      <% if(options.Required?.includes(r.name)) { %> 
            required:true,
       <% } %>
    },

    <% } %>



  ];

  constructor(
    private readonly <%- name %>Service: <%- classname %>Service,
    private readonly router: Router,
    private readonly route: ActivatedRoute,
  <% for(const o of options.Relations || []) { %>  private readonly <%- o.name %>Service: <%- o.target %>Service, <% } %>
  ) {}

  submit() {
    if (this.submitted === false)
      if (this.formGroup.valid) {
        this.submitted = true;
        this.<%- name %>Service.add(this.formGroup.value as any);
      }
  }
}
