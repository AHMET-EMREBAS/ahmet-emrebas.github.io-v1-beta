import {
  AfterViewInit,
  Component,
  OnInit
} from '@angular/core';
import {
  ActivatedRoute,
  Router,
} from '@angular/router';
import {
  IRead<%- classname %>,
} from 'common/inventory/interfaces';
import {
  InputOptions,
  setFormGroupValue,
} from 'material/form';
import { <%- classname %>Service } from '../<%- name %>.service';
import { firstValueFrom } from 'rxjs';


<% for(const target of new Set(options.Relations?.map(e=>e.target) || [])) { %> 

  import { <%- target %>Service } from '../../<%- target?.toLowerCase() %>';

<% } %>


import {
  FormControl,
  FormGroup,
  Validators,
} from '@angular/forms';

@Component({
  selector: 'ae-update-<%- name %>',
  templateUrl: './update-<%- name %>.component.html',
  styleUrls: ['./update-<%- name %>.component.scss'],
})
export class Update<%- classname %>Component implements AfterViewInit, OnInit {
  title = 'Update <%- classname %>';
  private itemToBeUpdated!: Partial<IRead<%- classname %>>;

formGroup = new FormGroup({
    <% for(const f of options.Properties) { %> 
     <%- f.Property %>: new FormControl(undefined, [ 
      <% if(options.Required?.includes(f.Property)) { %> 
            Validators.required, 
       <% } %>

      <% for(const [vk, vv] of Object.entries(f.Validation || [])) { %> 
          <% if(vk ==='type') { %> 
          <% continue; %> 
          <% } %>



           <% if(vk ==='password') { %>
            Validators.pattern(/[A-Z]{1,}/),  
            Validators.pattern(/[a-z]{1,}/),  
            Validators.pattern(/[0-9]{1,}/),  
            Validators.pattern(/[~!@#$%^&*()_+=-]{1,}/),  
            Validators.minLength(6),
          <%  continue; } %>
          
          <% if(vk ==='email') {  %>
              Validators.email,
          <%  continue; } %>

          <% if(vk ==='unique') {   %> 
          <% continue; %> 
          <%  } %>

          Validators.<%- vk %>(<%- vv %>),
      <% } %>

     ]), 
    <% } %>
    
    <% for(const r of options.Relations || []) { %> 
      <%- r.name %>: new FormControl(undefined, [ 
      <% if(options.Required?.includes(r.name)) { %> 
            Validators.required, 
       <% } %>
      ]),
    <% } %>
  });

  fields: InputOptions[] = [

    <% for(const f of options.Properties) { %> 
    
    {
      name: '<%- f.Property %>', 
      type: '<%- f.UI.type %>',  
      group: '<%- f.UI.group || 'Primary' %>',  
      placeholder: '<%- f.Label || f.Property %>', 
      <% if(options.Required?.includes(f.Property)) { %> 
            required:true,
       <% } %>

      <% for(const [vk, vv] of Object.entries(f.Validation || [])) { %> 
          <% if(vk ==='type') {  continue; %> <% } %>
          <%- vk %>: <% if(typeof vv ==='string') {  %> '<%- vv %>' <%} else { %>  <%- vv %> <%} %> ,
      <% } %>
    },

    <% } %>
    
    <% for(const r of options.Relations || []) { %> 

    {
      name: '<%- r.name %>', 
      type: <% if(r.type.endsWith('Many')) { %>  'select-many' <% } else { %> 'select' <% } %>, 
      group: '<%- r.group || 'Primary' %>',  
      placeholder: '<%- r.label || r.name %>',           
      asyncOptions:  this.<%- r.target.toLowerCase() %>Service.entities$,
      optionValue:'id', 
      optionLabel: '<%- r.viewColumns[0].column %>',
      <% if(options.Required?.includes(r.name)) { %> 
            required:true,
       <% } %>
    },

    <% } %>



  ];

  constructor(
    private readonly <%- name %>Service: <%- classname %>Service,
    private readonly router: Router,
    private readonly route: ActivatedRoute,
    <% for(const target of new Set(options.Relations?.map(e=>e.target) || [])) { %>  private readonly <%- target.toLowerCase() %>Service: <%- target %>Service, <% } %>
  ) {  }

  ngOnInit(): void {
    <% for(const target of new Set(options.Relations?.map(e=>e.target) || [])) { %> 
            this.<%- target.toLowerCase() %>Service.getAsOptions(['id', '<%- options.Relations.find(e=>e.target===target).viewColumns[0].column %>']);
    <% } %>
  }
  
  async ngAfterViewInit() {
    const __item = this.<%- name %>Service.getItemToBeUpdated();
    if (__item) {
      this.itemToBeUpdated = await firstValueFrom(
        this.<%- name %>Service.getByKey(__item.id)
      );
      setFormGroupValue(this.formGroup, this.itemToBeUpdated);
    }
  }


  submit() {

    if(this.formGroup.valid){ 
      this.<%- name %>Service.update({
          id: this.itemToBeUpdated.id,
          <% for(const f of options.Properties) { %> 
              <%- f.Property %>: this.value('<%- f.Property %>'),
          <%  } %>
          <% for(const f of options.Relations || []) { %> 
              <%- f.name %>: this.value('<%- f.name %>'),
          <%  } %>
        });
    }
  }


  getOptions(name: string) {
    return JSON.parse(localStorage.getItem(name) || '[]');
  }

  private value(key: string) {
    return this.formGroup.get(key)?.value;
  }
}
