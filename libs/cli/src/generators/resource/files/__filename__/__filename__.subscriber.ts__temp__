import { ClassConstructor } from 'core';
import { <%= classname %> } from 'models/<%= project %>/<%= filename %>';
import {
  EntitySubscriberInterface,
  EventSubscriber,
  InsertEvent,
  RemoveEvent,
} from 'typeorm';

import { Logger } from '@nestjs/common';
import { EventEmitter2 } from '@nestjs/event-emitter';

@EventSubscriber()
export class <%= classname %>Subscriber implements EntitySubscriberInterface<<%= classname %>> {
  logger = new Logger(<%= classname %>Subscriber.name);

  constructor(private readonly eventEmitter: EventEmitter2) {}

  listenTo(): ClassConstructor<<%= classname %>> {
    return <%= classname %>;
  }

  beforeInsert(event: InsertEvent<<%= classname %>>): void | Promise<any> {
    this.logger.log('[<%= classname %>] Inserted product', event.entity);
    this.eventEmitter.emit('product.beforeInsert', event.entity);
  }

  beforeRemove(event: RemoveEvent<<%= classname %>>): void | Promise<any> {
    this.logger.log('[<%= classname %>] Removed product', event.entity);
    this.eventEmitter.emit('product.beforeRemove', event.entity);
  }
}

