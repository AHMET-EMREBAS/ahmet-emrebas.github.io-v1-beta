import { QueryDTO } from 'core';
import * as request from 'supertest';

import { NestApplication } from '@nestjs/core';
import {
  Test,
  TestingModule,
} from '@nestjs/testing';
import { TypeOrmModule } from '@nestjs/typeorm';

import {
  <%= classname %> as Entity,
  <%= classname %>View as EntityView,
} from './entities';
import { <%= classname %>Controller as Controller } from './<%= filename %>.controller';
import { <%= classname %>Service as Service } from './<%= filename %>.service';

const testData: Entity[] = [
  { <%= filename %>: 'test <%= filename %> 1' },
  { <%= filename %>: 'test <%= filename %> 2' },
  { <%= filename %>: 'test <%= filename %> 3' },
  { <%= filename %>: 'test <%= filename %> 4' },
  { <%= filename %>: 'test <%= filename %> 5' },
];

const validItem: Entity = {
  <%= filename %>: 'fake 1',
};

const updatedItem: Partial<Entity> = {
  <%= filename %>: 'updated',
};

const invalidItem: Entity = {
  <%= filename %>: 'f',
};

describe('<%= filename %>Controller', () => {
  let app: NestApplication;
  let service: Service;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      imports: [
        TypeOrmModule.forRoot({
          type: 'better-sqlite3',
          database: 'tmp/database/<%= filename %>/controller-test.sqlite',
          autoLoadEntities: true,
          synchronize: true,
          dropSchema: true,
        }),
        TypeOrmModule.forFeature([Entity, EntityView]),
      ],
      controllers: [Controller],
      providers: [Service],
    }).compile();

    app = module.createNestApplication();
    app.init();
    service = module.get<Service>(Service);

    // Create test data
    for (const t of testData) await service.create(t);
  });

  it('/Get <%= filename %>', async () => {
    return request(app.getHttpServer())
      .get('/<%= filename %>')
      .expect(200)
      .expect((await service.viewAll(new QueryDTO())).map((e) => ({ ...e })));
  });

  it('/Get <%= filename %>/:id', async () => {
    return request(app.getHttpServer())
      .get('/<%= filename %>/1')
      .expect(200)
      .expect({ ...(await service.viewOne(1)) });
  });

  it('/Get <%= filename %> (Paginator) ', async () => {
    return request(app.getHttpServer())
      .get('/<%= filename %>/?take=1')
      .expect(200)
      .then((data) => expect(data.body.length == 1));
  });

  it('/Post <%= filename %>', async () => {
    return request(app.getHttpServer())
      .post('/<%= filename %>')
      .send({ ...validItem })
      .expect(201)
      .then((data) => {
        expect(data.body['<%= filename %>']).toBe(validItem.<%= filename %>);
      });
  });

  it('/Post <%= filename %> (Invalid Input)', () => {
    return request(app.getHttpServer())
      .post('/<%= filename %>')
      .send({ ...invalidItem })
      .expect(400)
      .then((data) => {
        expect(data.body?.message[0]).toBe(
          '<%= filename %> must be longer than or equal to 3 characters'
        );
      });
  });

  it('/Put <%= filename %>/:id', async () => {
    return request(app.getHttpServer())
      .put('/<%= filename %>/1')
      .send({ ...updatedItem })
      .expect(200);
  });

  it('/Delete <%= filename %>/:id', async () => {
    return request(app.getHttpServer()).delete('/<%= filename %>/1').expect(200);
  });
});
