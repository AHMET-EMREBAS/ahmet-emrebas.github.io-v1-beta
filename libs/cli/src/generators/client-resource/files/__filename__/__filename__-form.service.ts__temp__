import { Injectable } from '@angular/core';

import { FormManager } from 'material/form/form-builder';
import { of } from 'rxjs';

import { <%= classname %> } from './<%= filename %>.interface';
import { <%= classname %>Service } from './<%= filename %>.service';

@Injectable()
export class <%= classname %>FormService {
  private readonly formManager!: FormManager<<%= classname %>>;

  constructor(private readonly <%= filename %>Service: <%= classname %>Service) {
    this.formManager = new FormManager(<%= filename %>Service);
    this.init();
  }

  private init() {
    this.formManager
    <% for(const COLUMN of columns) { %> 
      .add({
        <% for( const [CN, CV] of Object.entries(COLUMN)) { %>

         <%- CN %>: <% if(typeof CV ==='string') { %> '<%= CV %>', <% } else { %>  <%= CV %>, <% } %>

        <% } %>
      })
    <% } %>

     <% for(const COLUMN of relations) { %> 
      .add({
        <% for( const [CN, CV] of Object.entries(COLUMN)) { %>
         <%- CN %>: <% if(typeof CV ==='string') { %> '<%= CV %>', <% } else { %>  <%= CV %>, <% } %>
        <% } %>
         <% if(COLUMN.inputType.includes('select')){ %> asyncOptions:this.<%= filename %>Service.<%- COLUMN.name %>Service?.entities$ <% }%>
      })
    <% } %>
  }

  createForm() {
    return this.formManager.newCreateForm();
  }

  updateForm() {
    return this.formManager.newUpdateForm();
  }

  createFormFields() {
    return this.formManager.getFields();
  }
  updateFormFields() {
    return this.formManager.getUpdateFields();
  }
}
